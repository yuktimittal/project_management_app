// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Project       Project[]

    ProjectMembers ProjectMembers[]
    Comment        Comment[]
    assignedTasks  Task[]           @relation("AssignedTasks")
    reportedTasks  Task[]           @relation("ReportedTasks")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id             String           @id @default(cuid())
    name           String
    description    String?
    startDate      DateTime
    endDate        DateTime
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    createdBy      User             @relation(fields: [userId], references: [id])
    userId         String
    Task           Task[]
    ProjectMembers ProjectMembers[]
}

model Task {
    id          String    @id @default(cuid())
    title       String
    description String?
    priority    String
    labels      String[]
    assignee    User?     @relation("AssignedTasks", fields: [assigneeId], references: [id])
    assigneeId  String?
    status      String    @default("To Do")
    type        String
    project     Project   @relation(fields: [projectId], references: [id])
    projectId   String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    Comment     Comment[]
    reporter    User      @relation("ReportedTasks", fields: [reporterId], references: [id])
    reporterId  String
    deadline    DateTime?
}

model ProjectMembers {
    id          String   @id @default(cuid())
    project     Project  @relation(fields: [projectId], references: [id])
    projectId   String
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    joiningDate DateTime @default(now())
    isActive    Boolean  @default(true)
}

model Comment {
    id        String   @id @default(cuid())
    task      Task     @relation(fields: [taskId], references: [id])
    taskId    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    body      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TaskActivity {
    id           String   @id @default(cuid())
    activityType String
    details      String
    timestamp    DateTime @default(now())
}
